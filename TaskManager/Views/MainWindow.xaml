<Window x:Class="TaskManager.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:res="clr-namespace:TaskManager.Properties" 
        xmlns:TaskManager="clr-namespace:TaskManager" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:e="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        mc:Ignorable="d"
        Title="{x:Static res:Resources.Title}" Height="500" Width="800">
    <Window.Resources>
        <TaskManager:StatusColorConverter x:Key="StatusColorConverter" />
        <!--Button style-->
        <Style TargetType="Button">
            <Setter Property="FontSize" Value ="12"/>
            <Setter Property="FontWeight" Value ="Normal"/>
            <Setter Property="MaxWidth" Value ="140"/>
        </Style>
        <!--TextBox style-->
        <Style TargetType="TextBox">
            <Setter Property="DataContext" Value ="{Binding ElementName=TasksTree, Path=SelectedValue}"/>
            <Setter Property="MinWidth" Value ="25"/>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <!--ComboBox style-->
        <Style TargetType="ComboBox">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <!--DataPicker style-->
        <Style TargetType="DatePicker">
            <Setter Property="DataContext" Value ="{Binding ElementName=TasksTree, Path=SelectedValue}"/>
            <Setter Property="Height" Value="Auto"/>
            <Setter Property="Width" Value="Auto"/>
        </Style>
        <!--StackPanel style-->
        <Style TargetType="StackPanel">
            <Setter Property="VerticalAlignment" Value ="Top"/>
            <Setter Property="HorizontalAlignment" Value ="Stretch"/>
            <Setter Property="Margin" Value ="0,2,0,0"/>
        </Style>
        <!--ToolTip style-->
        <Style TargetType="ToolTip">
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock TextWrapping="Wrap" MaxWidth="200" FontSize="12" Text="{Binding}" />
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <!--Main dock panel-->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <GridSplitter HorizontalAlignment="Right" 
                  VerticalAlignment="Stretch" 
                  Grid.Column="0" Grid.RowSpan="8" ResizeBehavior="BasedOnAlignment"
                      Margin="0,0,3,0"
                  Width="5" Background="#FFBCBCBC" ResizeDirection="Columns" MaxWidth="500" />
    <StackPanel Grid.Row="0" Grid.RowSpan="7" Grid.Column="0" Orientation="Vertical" Margin="0,0,10,0">
            <Button Command="{Binding AddNewTaskCommand}" Content="{x:Static res:Resources.AddTask}" HorizontalAlignment="Left" MinWidth="150"></Button>
            <!--Tasks tree-->
            <TreeView Name="TasksTree" 
                      ItemsSource="{Binding Path=TasksCollection, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                      Width="Auto">
                <e:Interaction.Behaviors>
                    <TaskManager:BindableSelectedItemBehavior SelectedItem="{Binding SelectedItem, Mode=TwoWay}" />
                </e:Interaction.Behaviors>
                <TreeView.ItemContainerStyle>
                <!-- This Style binds a TreeViewItem to a TaskManagerViewModel. -->
                <Style TargetType="{x:Type TreeViewItem}">
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                    <Setter Property="FontWeight" Value="Normal" />
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="FontWeight" Value="Bold" />
                        </Trigger>
                        </Style.Triggers>
                </Style>
            </TreeView.ItemContainerStyle>

            <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding ChildTask}">
                        <StackPanel Orientation="Horizontal">
                            <Ellipse x:Name="StatusEllipse" 
                                        DockPanel.Dock="Left" 
                                        Width="10" Height="10" 
                                        VerticalAlignment="Center" 
                                        Stroke="#40000000" StrokeThickness="2" Fill="{Binding Path=Status, Converter={StaticResource StatusColorConverter}}">
                            </Ellipse>
                                <TextBlock Text="{Binding Name}"/>
                    </StackPanel>
                    </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
        </StackPanel>
        <!--Header-->
        <!--StackPanel Grid.Row="0" Grid.Column="1"  Orientation="Horizontal"-->
        
        <Label Grid.Row="0" Grid.Column="1" Content="{x:Static res:Resources.TaskName}"></Label>
        <TextBox Grid.Row="0" Grid.Column="2" Grid.ColumnSpan="4" 
                 Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" 
                 HorizontalAlignment="Stretch" Width="Auto"></TextBox>
        
        <!--/StackPanel-->
        <!--Performer and status-->
        <StackPanel Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="4" Orientation="Horizontal">
            <Label Content="{x:Static res:Resources.PerformerName}"></Label>
            <TextBox Text="{Binding Performer, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="150"></TextBox>
            <Label Content="{x:Static res:Resources.TaskStatus}"></Label>
            <ComboBox 
                ItemsSource="{Binding Path=StatusModels}" 
                SelectedValue="{Binding Path=SelectedValue.Status, ElementName=TasksTree, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" 
                SelectedValuePath="Number" 
                DisplayMemberPath="Name"
                SelectedItem="{Binding Path=StatusModels.SelectedStatus, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                Width="150" Height="25">
            </ComboBox>
        </StackPanel>
            <!--Registration date and complete date-->
        <StackPanel Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="4" Orientation="Horizontal">
            <Label Content="{x:Static res:Resources.RegistrationDate}"></Label>
            <DatePicker SelectedDate="{Binding Date, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
            <Label Content="{x:Static res:Resources.CompleteDate}"></Label>
            <DatePicker SelectedDate="{Binding CompletionDate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
        </StackPanel>
            <!--RunTime-->
        <GroupBox Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="4" Header="{x:Static res:Resources.TaskRunTime}">
            <StackPanel Orientation="Horizontal">
            <Label Content="{x:Static res:Resources.ActualRunTime}"/>
                <TextBox Text="{Binding ActualRunTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, TargetNullValue=''}" Width="75"/>
            <Label Content="{x:Static res:Resources.PlannedRunTime}"/>
                <TextBox Text="{Binding PlannedRunTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, TargetNullValue=''}" Width="75"/>
            </StackPanel>
        </GroupBox>
            <!--RunTimeTotal-->
            <GroupBox Grid.Row="4" Grid.Column="1" Grid.ColumnSpan="4" Header="{x:Static res:Resources.ChildTaskRunTime}">
        <StackPanel Orientation="Horizontal">
            <Label Content="{x:Static res:Resources.ActualRunTime}"></Label>
            <Label Content="{Binding Path=SelectedValue.ActualRunTimeTotal, ElementName=TasksTree, Mode=OneWay}" Width="75" Height="25"/>
            <Label Content="{x:Static res:Resources.PlannedRunTime}"></Label>
                <Label Content="{Binding Path=SelectedValue.PlannedRunTimeTotal, ElementName=TasksTree, Mode=OneWay}" Width="75" Height="25"/>                
        </StackPanel>
            </GroupBox>
            <!--Description-->
            <Label Grid.Row="5" Grid.Column="1" Content="{x:Static res:Resources.DescriptionOfTask}"></Label>
            
            <TextBox Grid.Row="6" Grid.Column="1" Grid.ColumnSpan="2"
                    Text="{Binding Description, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                    AcceptsReturn="True" 
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalScrollBarVisibility="Auto"></TextBox>
        
            
            <Label Grid.Row="5" Grid.Column="3" Content="{x:Static res:Resources.UI_ListOfSubTasks}"></Label>

        <DataGrid Grid.Row="6" Grid.Column="3" ItemsSource="{Binding Path=SelectedValue.ChildTask, ElementName=TasksTree, UpdateSourceTrigger=PropertyChanged}" AutoGenerateColumns="False" EnableRowVirtualization="True" IsEnabled="False" VerticalScrollBarVisibility="Auto">
                        <DataGrid.Columns>
                            <DataGridTextColumn Binding="{Binding Name}" Header="{x:Static res:Resources.UI_DataGrid_Task}" MinWidth="150" />
                            <DataGridTextColumn Binding="{Binding Status}" Header="{x:Static res:Resources.UI_DataGrid_Status}" MinWidth="75" />
                        </DataGrid.Columns>
            </DataGrid>
            

        <!--SubTaskButtons-->
        <StackPanel Grid.Row="7" Grid.Column="1" Grid.ColumnSpan="4" Orientation="Horizontal">
            <Button Content="{x:Static res:Resources.AddChildTask}" Margin="2" Command="{Binding AddChildTaskCommand}" MinWidth="150"></Button>
            <Button Content="{x:Static res:Resources.RemoveTask}" Margin="2"  Command="{Binding RemoveSelectedTaskCommand}" MinWidth="150"></Button>
            <Button Content="{x:Static res:Resources.SaveChanges}" Margin="2"  Command="{Binding SaveChangesCommand}" MinWidth="150"></Button>
        </StackPanel>
    </Grid>


</Window>
