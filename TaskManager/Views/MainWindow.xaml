<Window x:Class="TaskManager.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:res="clr-namespace:TaskManager.Properties" 
        xmlns:TaskManager="clr-namespace:TaskManager" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="{x:Static res:Resources.Title}" Height="500" Width="800">
    <Window.Resources>
        <TaskManager:StatusConverter x:Key="StatusConverter" />
        <TaskManager:StatusColorConverter x:Key="StatusColorConverter" />
        <!--Button style-->
        <Style TargetType="Button">
            <Setter Property="FontSize" Value ="12"/>
            <Setter Property="FontWeight" Value ="Normal"/>
            <Setter Property="MinWidth" Value ="100"/>
            <Setter Property="MaxWidth" Value ="140"/>
            <Setter Property="Height" Value ="25"/>
        </Style>
        <!--TextBox style-->
        <Style TargetType="TextBox">
            <Setter Property="DataContext" Value ="{Binding ElementName=TasksTree, Path=SelectedValue}"/>
            <Setter Property="MinWidth" Value ="25"/>
        </Style>
        <!--DataPicker style-->
        <Style TargetType="DatePicker">
            <Setter Property="DataContext" Value ="{Binding ElementName=TasksTree, Path=SelectedValue}"/>
            <Setter Property="Height" Value="25"/>
            <Setter Property="MaxWidth" Value="150"/>
            <Setter Property="MaxHeight" Value="25"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>
        <!--StackPanel style-->
        <Style TargetType="StackPanel">
            <Setter Property="VerticalAlignment" Value ="Top"/>
            <Setter Property="Margin" Value ="0,2,0,0"/>
        </Style>
        <!--Error template-->
        <ControlTemplate x:Key="DefaultErrorTemplate">
            <DockPanel DataContext="{Binding ElementName=adorner, 
                                                               Path=AdornedElement.(Validation.Errors)/ErrorContent}">
                <Ellipse x:Name="Ellipse" 
                            DockPanel.Dock="Right" 
                            Margin="2,0,2,0" 
                            Width="14" Height="14" 
                            VerticalAlignment="Center" 
                            Stroke="#40000000" StrokeThickness="2" Fill="Red">
                    <Ellipse.ToolTip>
                        <Border MaxWidth="350">
                            <ContentControl FontSize="14" Content="{Binding}"/>
                        </Border>
                    </Ellipse.ToolTip>
                </Ellipse>
                <Border BorderBrush="#40FFAF00" BorderThickness="2" IsHitTestVisible="False">
                    <Border.Background>
                        <SolidColorBrush Color="Red" Opacity="0.2"/>
                    </Border.Background>
                    <AdornedElementPlaceholder Margin="-2" Name="adorner"/>
                </Border>
            </DockPanel>
        </ControlTemplate>
    </Window.Resources>
    <!--Main dock panel-->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="30" />
            <RowDefinition Height="30" />
            <RowDefinition Height="30" />
            <RowDefinition Height="45" />
            <RowDefinition Height="45" />
            <RowDefinition Height="*" />
            <RowDefinition Height="30" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="250" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <GridSplitter HorizontalAlignment="Right" 
                  VerticalAlignment="Stretch" 
                  Grid.Column="0" Grid.RowSpan="7" ResizeBehavior="BasedOnAlignment"
                  Width="5" Background="#FFBCBCBC" ResizeDirection="Columns" MaxWidth="500" />
    <StackPanel Grid.Row="0" Grid.RowSpan="7" Grid.Column="0" Orientation="Vertical">
            <Button Command="{Binding AddNewTaskCommand}" Content="{x:Static res:Resources.AddTask}"></Button>
            <!--Tasks tree-->
            <TreeView Name="TasksTree" ItemsSource="{Binding Path=TasksCollection, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="Auto">
                <TreeView.ItemContainerStyle>
                <!-- This Style binds a TreeViewItem to a TaskManagerViewModel. -->
                <Style TargetType="{x:Type TreeViewItem}">
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <Setter Property="FontWeight" Value="Normal" />
                    <Setter Property="HorizontalAlignment" Value="Left"/>
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="FontWeight" Value="Bold" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </TreeView.ItemContainerStyle>

            <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                        <StackPanel Orientation="Horizontal">
                            <Ellipse x:Name="StatusEllipse" 
                                        DockPanel.Dock="Left" 
                                        Width="10" Height="10" 
                                        VerticalAlignment="Center" 
                                        Stroke="#40000000" StrokeThickness="2" Fill="{Binding Path=Status, Converter={StaticResource StatusColorConverter}}">
                            </Ellipse>
                                <TextBlock Text="{Binding Name}"/>
                    </StackPanel>
                    </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
        </StackPanel>
        <!--Header-->
        <StackPanel Grid.Row="0" Grid.Column="1"  Orientation="Horizontal">
            <Label Content="{x:Static res:Resources.TaskName}"></Label>
            <TextBox Validation.ErrorTemplate="{StaticResource DefaultErrorTemplate}" Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" HorizontalAlignment="Stretch" Width="Auto" MinWidth="300"></TextBox>
        </StackPanel>
        <!--Performer and status-->
        <StackPanel Grid.Row="1" Grid.Column="1"  Orientation="Horizontal">
            <Label Content="{x:Static res:Resources.PerformerName}"></Label>
            <TextBox Text="{Binding Performer, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="150"></TextBox>
            <Label Content="{x:Static res:Resources.TaskStatus}"></Label>
            <ComboBox 
                ItemsSource="{Binding Path=StatusModels}" 
                SelectedValue="{Binding Path=SelectedValue.Status, ElementName=TasksTree, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" 
                SelectedValuePath="Number" 
                DisplayMemberPath="Name"
                SelectedItem="{Binding Path=StatusModels.SelectedStatus, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                Validation.ErrorTemplate="{StaticResource DefaultErrorTemplate}"  Width="150" Height="25">
            </ComboBox>
        </StackPanel>
            <!--Registration date and complete date-->
        <StackPanel Grid.Row="2" Grid.Column="1" Orientation="Horizontal">
            <Label Content="{x:Static res:Resources.RegistrationDate}"></Label>
            <DatePicker SelectedDate="{Binding Date, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            <Label Content="{x:Static res:Resources.CompleteDate}"></Label>
            <DatePicker SelectedDate="{Binding CompletionDate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
        </StackPanel>
            <!--RunTime-->
        <GroupBox Grid.Row="3" Grid.Column="1" Header="{x:Static res:Resources.TaskRunTime}">
            <StackPanel Orientation="Horizontal">
            <Label Content="{x:Static res:Resources.ActualRunTime}"/>
                <TextBox Validation.ErrorTemplate="{StaticResource DefaultErrorTemplate}" Text="{Binding ActualRunTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}" Width="75"/>
            <Label Content="{x:Static res:Resources.PlannedRunTime}"/>
                <TextBox Text="{Binding PlannedRunTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="75"/>
            </StackPanel>
        </GroupBox>
            <!--RunTimeTotal-->
            <GroupBox Grid.Row="4" Grid.Column="1" Header="{x:Static res:Resources.ChildTaskRunTime}">
        <StackPanel Orientation="Horizontal">
            <Label Content="{x:Static res:Resources.ActualRunTime}"></Label>
            <Label Content="{Binding Path=SelectedValue.ActualRunTimeTotal, ElementName=TasksTree, Mode=OneWay}" Width="75" Height="25"/>
            <Label Content="{x:Static res:Resources.PlannedRunTime}"></Label>
            <Label Content="{Binding Path=SelectedValue.PlannedRunTimeTotal, ElementName=TasksTree, Mode=OneWay}" Width="75" Height="25"/>                
        </StackPanel>
            </GroupBox>
            <!--Description-->
        <StackPanel Grid.Row="5" Grid.Column="1"  Orientation="Vertical">
            <Label Content="{x:Static res:Resources.DescriptionOfTask}"></Label>
            <StackPanel Grid.Row="5" Grid.Column="1"  Orientation="Horizontal">
                <TextBox Text="{Binding Description, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" AcceptsReturn="True" Height="190" MinWidth="300"></TextBox>
                <DataGrid ItemsSource="{Binding Path=SelectedValue.Children, ElementName=TasksTree, UpdateSourceTrigger=PropertyChanged}" MinWidth="225" AutoGenerateColumns="False" EnableRowVirtualization="True" CanUserReorderColumns="False" CanUserResizeColumns="False" CanUserSortColumns="False" IsEnabled="False">
                    <DataGrid.Columns>
                        <DataGridTextColumn Binding="{Binding Name}" Header="{x:Static res:Resources.UI_DataGrid_Task}" MinWidth="150" />
                        <DataGridTextColumn Binding="{Binding Status}" Header="{x:Static res:Resources.UI_DataGrid_Status}" MinWidth="75" />
                    </DataGrid.Columns>
                </DataGrid>
            </StackPanel>
        </StackPanel>
        <!--SubTaskButtons-->
        <StackPanel Grid.Row="6" Grid.Column="1"  Orientation="Horizontal">
            <Button Content="{x:Static res:Resources.AddChildTask}" Margin="2" Command="{Binding AddChildTaskCommand}"></Button>
            <Button Content="{x:Static res:Resources.RemoveTask}" Margin="2"  Command="{Binding RemoveSelectedTaskCommand}" ></Button>
            <Button Content="{x:Static res:Resources.SaveChanges}" Margin="2"  Command="{Binding SaveChangesCommand}"></Button>
        </StackPanel>
    </Grid>


</Window>
